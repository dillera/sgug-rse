diff -u -r pygobject-3.34.0-orig/gi/pygi-invoke.c pygobject-3.34.0/gi/pygi-invoke.c
--- pygobject-3.34.0-orig/gi/pygi-invoke.c	2019-01-20 09:52:42.000000000 +0000
+++ pygobject-3.34.0/gi/pygi-invoke.c	2020-11-21 23:32:10.646607240 +0000
@@ -675,8 +675,17 @@
                         PyObject *py_kwargs)
 {
     PyGICallableCache *cache = (PyGICallableCache *) function_cache;
-    GIFFIReturnValue ffi_return_value = {0};
+    ffi_arg ffi_return_value = {0};
+    //GIFFIReturnValue ffi_return_value = {0L};
+    gpointer return_value_p; /* Will point inside the union return_value */
     PyObject *ret = NULL;
+    GITypeInfo *rinfo;
+    GITypeTag rtag;
+    ffi_type *rtype;
+
+    rinfo = cache->return_cache->type_info;
+    rtype = g_type_info_get_ffi_type (rinfo);
+    rtag = g_type_info_get_tag(rinfo);
 
     if (!_invoke_state_init_from_cache (state, function_cache,
                                         py_args, py_kwargs))
@@ -685,11 +694,29 @@
     if (!_invoke_marshal_in_args (state, function_cache))
          goto err;
 
+    /*
+    switch (rtag)
+	{
+	case GI_TYPE_TAG_FLOAT:
+	    return_value_p = &ffi_return_value.v_float;
+	    break;
+	case GI_TYPE_TAG_DOUBLE:
+	    return_value_p = &ffi_return_value.v_double;
+	    break;
+	case GI_TYPE_TAG_INT64:
+	case GI_TYPE_TAG_UINT64:
+	    return_value_p = &ffi_return_value.v_uint64;
+	    break;
+	default:
+	    return_value_p = &ffi_return_value.v_long;
+	}
+    */
+
     Py_BEGIN_ALLOW_THREADS;
 
         ffi_call (&function_cache->invoker.cif,
                   state->function_ptr,
-                  (void *) &ffi_return_value,
+                  &ffi_return_value,
                   (void **) state->ffi_args);
 
     Py_END_ALLOW_THREADS;
@@ -709,9 +736,36 @@
     }
 
     if (cache->return_cache) {
-        gi_type_info_extract_ffi_return_value (cache->return_cache->type_info,
-                                               &ffi_return_value,
-                                               &state->return_arg);
+	// gi_type_info_extract_ffi_return_value (cache->return_cache->type_info,
+	// &ffi_return_value,
+	// &state->return_arg);
+	switch (rtag)
+	    {
+	    case GI_TYPE_TAG_FLOAT:
+		{
+		    float f = ffi_return_value;
+		    state->return_arg.v_float = f;
+		    break;
+		}
+	    case GI_TYPE_TAG_DOUBLE:
+		{
+		    double d = ffi_return_value;
+		    state->return_arg.v_double = d;
+		    break;
+		}
+	    case GI_TYPE_TAG_INT64:
+	    case GI_TYPE_TAG_UINT64:
+		{
+		    uint64_t ll = ffi_return_value;
+		    state->return_arg.v_uint64 = ll;
+		    break;
+		}
+	    default:
+		{
+		    uint32_t l = ffi_return_value;
+		    state->return_arg.v_long = l;
+		}
+	    }
     }
 
     ret = _invoke_marshal_out_args (state, function_cache);
diff -u -r pygobject-3.34.0-orig/gi/pygi-repository.c pygobject-3.34.0/gi/pygi-repository.c
--- pygobject-3.34.0-orig/gi/pygi-repository.c	2019-01-20 09:52:42.000000000 +0000
+++ pygobject-3.34.0/gi/pygi-repository.c	2020-11-21 23:32:05.773922680 +0000
@@ -33,6 +33,7 @@
                                         PyObject       *args,
                                         PyObject       *kwargs)
 {
+    //printf("_wrap_g_irepository_enumerate_versions called\n");fflush(stdout);
     static char *kwlist[] = { "namespace", NULL };
     const char *namespace_;
     GList *versions, *item;
@@ -40,6 +41,7 @@
 
     if (!PyArg_ParseTupleAndKeywords (args, kwargs, "s:Repository.enumerate_versions",
                                       kwlist, &namespace_)) {
+	//printf("Silent return null 0\n");fflush(stdout);
         return NULL;
     }
 
@@ -48,6 +50,7 @@
     for (item = versions; item; item = item->next) {
         char *version = item->data;
         PyObject *py_version = pygi_utf8_to_py (version);
+	//printf("appending version %s\n", version);fflush(stdout);
         PyList_Append(ret, py_version);
         Py_DECREF(py_version);
         g_free (version);
@@ -60,18 +63,23 @@
 static PyObject *
 _wrap_g_irepository_get_default (PyObject *self)
 {
+    //printf("_wrap_g_irepository_get_default called\n");fflush(stdout);
     static PyGIRepository *repository = NULL;
 
     if (!repository) {
         repository = (PyGIRepository *) PyObject_New (PyGIRepository, &PyGIRepository_Type);
         if (repository == NULL) {
+	    //printf("PyObject_New returned nothing\n");fflush(stdout);
             return NULL;
         }
+	//printf("PyObject_New returned something\n");fflush(stdout);
 
         repository->repository = g_irepository_get_default();
+	//printf("And get default gives us %p\n", repository->repository);fflush(stdout);
     }
 
     Py_INCREF ( (PyObject *) repository);
+    //printf("Returning the PyObject(%p)\n", repository);fflush(stdout);
     return (PyObject *) repository;
 }
 
@@ -80,6 +88,7 @@
                              PyObject       *args,
                              PyObject       *kwargs)
 {
+    //printf("wrap_g_irepository_require called\n");fflush(stdout);
     static char *kwlist[] = { "namespace", "version", "lazy", NULL };
 
     const char *namespace_;
@@ -90,18 +99,22 @@
 
     if (!PyArg_ParseTupleAndKeywords (args, kwargs, "s|zO:Repository.require",
                                       kwlist, &namespace_, &version, &lazy)) {
+	//printf("Silent return null 1\n");fflush(stdout);
         return NULL;
     }
 
     if (lazy != NULL && PyObject_IsTrue (lazy)) {
         flags |= G_IREPOSITORY_LOAD_FLAG_LAZY;
+	//printf("Lazyload used.\n");fflush(stdout);
     }
 
     error = NULL;
+    //printf("Performing g_irepository_require\n");fflush(stdout);
     g_irepository_require (self->repository, namespace_, version, flags, &error);
     if (error != NULL) {
         PyErr_SetString (PyGIRepositoryError, error->message);
         g_error_free (error);
+	//printf("Silent return null 2\n");fflush(stdout);
         return NULL;
     }
 
@@ -109,21 +122,42 @@
 }
 
 static PyObject *
+_staticdhmethod (PyGIRepository *self)
+{
+    //printf("_staticdhmethod called\n");fflush(stdout);
+    return pygi_gboolean_to_py(TRUE);
+}
+
+static PyObject *
+_dhmethod (PyGIRepository *self,
+	   PyObject       *args,
+	   PyObject       *kwargs)
+{
+    //printf("_dhmethod called\n");fflush(stdout);
+    return pygi_gboolean_to_py(TRUE);
+}
+
+static PyObject *
 _wrap_g_irepository_is_registered (PyGIRepository *self,
                                    PyObject       *args,
                                    PyObject       *kwargs)
 {
+    //printf("_wrap_g_irepository_is_registered called\n");fflush(stdout);
     static char *kwlist[] = { "namespace", "version", NULL };
     const char *namespace_;
     const char *version = NULL;
 
     if (!PyArg_ParseTupleAndKeywords (args, kwargs, "s|z:Repository.is_registered",
                                       kwlist, &namespace_, &version)) {
+	//printf("Silent return null 3\n");fflush(stdout);
         return NULL;
     }
 
-    return pygi_gboolean_to_py (g_irepository_is_registered (self->repository,
-                                                             namespace_, version));
+    gboolean retval = g_irepository_is_registered (self->repository,
+						   namespace_, version);
+
+    //printf("g_irepository_is_registered returning %d\n", retval);fflush(stdout);
+    return pygi_gboolean_to_py(retval);
 }
 
 static PyObject *
@@ -131,6 +165,7 @@
                                   PyObject       *args,
                                   PyObject       *kwargs)
 {
+    //printf("_wrap_g_irepository_find_by_name called\n");fflush(stdout);
     static char *kwlist[] = { "namespace", "name", NULL };
 
     const char *namespace_;
@@ -142,6 +177,7 @@
 
     if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                       "ss:Repository.find_by_name", kwlist, &namespace_, &name)) {
+	//printf("Silent return null 4\n");fflush(stdout);
         return NULL;
     }
 
@@ -156,11 +192,13 @@
             name = trimmed_name;
         }
     }
+    //printf("Looking for %s<->%s\n", namespace_, name);fflush(stdout);
 
     info = g_irepository_find_by_name (self->repository, namespace_, name);
     g_free (trimmed_name);
 
     if (info == NULL) {
+	//printf("Didn't find it\n");fflush(stdout);
         Py_RETURN_NONE;
     }
 
@@ -168,6 +206,8 @@
 
     g_base_info_unref (info);
 
+    //printf("Found and returning %p\n", py_info);fflush(stdout);
+
     return py_info;
 }
 
@@ -176,6 +216,7 @@
                                PyObject       *args,
                                PyObject       *kwargs)
 {
+    //printf("_wrap_g_irepository_get_infos called\n");fflush(stdout);
     static char *kwlist[] = { "namespace", NULL };
 
     const char *namespace_;
@@ -185,12 +226,14 @@
 
     if (!PyArg_ParseTupleAndKeywords (args, kwargs, "s:Repository.get_infos",
                                       kwlist, &namespace_)) {
+	//printf("Silent return null 5\n");fflush(stdout);
         return NULL;
     }
 
     n_infos = g_irepository_get_n_infos (self->repository, namespace_);
     if (n_infos < 0) {
         PyErr_Format (PyExc_RuntimeError, "Namespace '%s' not loaded", namespace_);
+	//printf("Silent return null 6\n");fflush(stdout);
         return NULL;
     }
 
@@ -201,6 +244,7 @@
         PyObject *py_info;
 
         info = g_irepository_get_info (self->repository, namespace_, i);
+	//printf("g_irepository_get_info on one\n");fflush(stdout);
         g_assert (info != NULL);
 
         py_info = _pygi_info_new (info);
@@ -218,25 +262,38 @@
     return infos;
 }
 
+void dhbreakonme();
+
+void dhbreakonme()
+{
+    //printf("got here.\n");
+    fflush(stdout);
+}
+
 static PyObject *
 _wrap_g_irepository_get_typelib_path (PyGIRepository *self,
                                       PyObject       *args,
                                       PyObject       *kwargs)
 {
+    //printf("_wrap_g_irepository_get_typelib_path called\n");fflush(stdout);
+    //dhbreakonme();
     static char *kwlist[] = { "namespace", NULL };
     const char *namespace_;
     const gchar *typelib_path;
 
     if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                       "s:Repository.get_typelib_path", kwlist, &namespace_)) {
+	//printf("Silent return null 7\n");fflush(stdout);
         return NULL;
     }
 
     typelib_path = g_irepository_get_typelib_path (self->repository, namespace_);
     if (typelib_path == NULL) {
+	//printf("Oops, no typelib_path\n");fflush(stdout);
         PyErr_Format (PyExc_RuntimeError, "Namespace '%s' not loaded", namespace_);
         return NULL;
     }
+    //printf("typelib_path=%s\n",typelib_path);fflush(stdout);
 
     return pygi_filename_to_py (typelib_path);
 }
@@ -246,20 +303,24 @@
                                  PyObject       *args,
                                  PyObject       *kwargs)
 {
+    //printf("_wrap_g_irepository_get_version called\n");fflush(stdout);
     static char *kwlist[] = { "namespace", NULL };
     const char *namespace_;
     const gchar *version;
 
     if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                       "s:Repository.get_version", kwlist, &namespace_)) {
+	//printf("Silent return null 8\n");fflush(stdout);
         return NULL;
     }
 
     version = g_irepository_get_version (self->repository, namespace_);
     if (version == NULL) {
         PyErr_Format (PyExc_RuntimeError, "Namespace '%s' not loaded", namespace_);
+	//printf("Silent return null 9\n");fflush(stdout);
         return NULL;
     }
+    //printf("g_irepository_get_version returning %s\n", version);fflush(stdout);
 
     return pygi_utf8_to_py (version);
 }
@@ -267,6 +328,7 @@
 static PyObject *
 _wrap_g_irepository_get_loaded_namespaces (PyGIRepository *self)
 {
+    //printf("_wrap_g_irepository_get_loaded_namespaces called\n");fflush(stdout);
     char **namespaces;
     PyObject *py_namespaces;
     gssize i;
@@ -275,6 +337,8 @@
 
     py_namespaces = PyList_New (0);
     for (i = 0; namespaces[i] != NULL; i++) {
+	//printf("g_irepository_get_loaded_namespace have a namespace: %s\n",
+	//       namespaces[i]);fflush(stdout);
         PyObject *py_namespace = pygi_utf8_to_py (namespaces[i]);
         PyList_Append (py_namespaces, py_namespace);
         Py_DECREF(py_namespace);
@@ -291,6 +355,7 @@
                                       PyObject       *args,
                                       PyObject       *kwargs)
 {
+    //printf("_wrap_g_irepository_get_dependencies called\n");fflush(stdout);
     static char *kwlist[] = { "namespace", NULL };
     const char *namespace_;
     char **namespaces;
@@ -299,6 +364,7 @@
 
     if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                       "s:Repository.get_dependencies", kwlist, &namespace_)) {
+	//printf("Silent return null 10\n");fflush(stdout);
         return NULL;
     }
 
@@ -306,10 +372,13 @@
     /* Returns NULL in case of no dependencies */
     namespaces = g_irepository_get_dependencies (self->repository, namespace_);
     if (namespaces == NULL) {
+	//printf("Silent return null 11\n");fflush(stdout);
         return py_namespaces;
     }
 
     for (i = 0; namespaces[i] != NULL; i++) {
+	//printf("g_irepository_get_dependencies have dep: %s",
+	//       namespaces[i]);fflush(stdout);
         PyObject *py_namespace = pygi_utf8_to_py (namespaces[i]);
         PyList_Append (py_namespaces, py_namespace);
         Py_DECREF(py_namespace);
@@ -326,6 +395,7 @@
                                                 PyObject       *args,
                                                 PyObject       *kwargs)
 {
+    //printf("_wrap_g_irepository_get_immediate_dependencies called\n");fflush(stdout);
     static char *kwlist[] = { "namespace", NULL };
     const char *namespace_;
     char **namespaces;
@@ -335,6 +405,7 @@
     if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                       "s:Repository.get_immediate_dependencies",
                                       kwlist, &namespace_)) {
+	//printf("Silent return null 12\n");fflush(stdout);
         return NULL;
     }
 
@@ -343,6 +414,8 @@
                                                            namespace_);
 
     for (i = 0; namespaces[i] != NULL; i++) {
+	//printf("get_immediate_deps - one namespace: %s\n",
+	//       namespaces[i]);fflush(stdout);
         PyObject *py_namespace = pygi_utf8_to_py (namespaces[i]);
         PyList_Append (py_namespaces, py_namespace);
         Py_DECREF (py_namespace);
@@ -366,6 +439,8 @@
     { "get_dependencies", (PyCFunction) _wrap_g_irepository_get_dependencies, METH_VARARGS | METH_KEYWORDS  },
     { "get_immediate_dependencies", (PyCFunction) _wrap_g_irepository_get_immediate_dependencies, METH_VARARGS | METH_KEYWORDS  },
     { "is_registered", (PyCFunction) _wrap_g_irepository_is_registered, METH_VARARGS | METH_KEYWORDS  },
+    { "staticdhmethod", (PyCFunction) _staticdhmethod, METH_STATIC | METH_NOARGS },
+    { "dhmethod", (PyCFunction) _dhmethod, METH_VARARGS | METH_KEYWORDS  },
     { NULL, NULL, 0 }
 };
 
@@ -375,27 +450,34 @@
 int
 pygi_repository_register_types (PyObject *m)
 {
+    //printf("pygi_repository_register_types called\n");fflush(stdout);
     Py_TYPE(&PyGIRepository_Type) = &PyType_Type;
 
     PyGIRepository_Type.tp_flags = Py_TPFLAGS_DEFAULT;
     PyGIRepository_Type.tp_methods = _PyGIRepository_methods;
 
-    if (PyType_Ready (&PyGIRepository_Type) < 0)
+    if (PyType_Ready (&PyGIRepository_Type) < 0) {
+	//printf("Silent return null 13\n");fflush(stdout);
         return -1;
+    }
 
     Py_INCREF ((PyObject *) &PyGIRepository_Type);
     if (PyModule_AddObject (m, "Repository", (PyObject *) &PyGIRepository_Type) < 0) {
         Py_DECREF ((PyObject *) &PyGIRepository_Type);
+	//printf("Silent return null 13\n");fflush(stdout);
         return -1;
     }
 
     PyGIRepositoryError = PyErr_NewException ("gi.RepositoryError", NULL, NULL);
-    if (PyGIRepositoryError == NULL)
+    if (PyGIRepositoryError == NULL) {
+	//printf("Silent return null 14\n");fflush(stdout);
         return -1;
+    }
 
     Py_INCREF (PyGIRepositoryError);
     if (PyModule_AddObject (m, "RepositoryError", PyGIRepositoryError) < 0) {
         Py_DECREF (PyGIRepositoryError);
+	//printf("Silent return null 15\n");fflush(stdout);
         return -1;
     }
 
diff -u -r pygobject-3.34.0-orig/gi/pygi-type.c pygobject-3.34.0/gi/pygi-type.c
--- pygobject-3.34.0-orig/gi/pygi-type.c	2019-01-20 09:52:42.000000000 +0000
+++ pygobject-3.34.0/gi/pygi-type.c	2020-11-21 23:32:05.776514760 +0000
@@ -65,14 +65,19 @@
 
     repository = g_irepository_get_default();
 
+    //printf("pygi_type_import_by_g_type looking in (%p,%d)\n",
+    //	   repository, g_type);fflush(stdout);
     info = g_irepository_find_by_gtype (repository, g_type);
     if (info == NULL) {
+	//printf("did not find\n");fflush(stdout);
         return NULL;
     }
 
+    //printf("calling import_by_gi_info\n");fflush(stdout);
     type = pygi_type_import_by_gi_info (info);
     g_base_info_unref (info);
 
+    //printf("returning type %p\n", type);fflush(stdout);
     return type;
 }
 
diff -u -r pygobject-3.34.0-orig/tests/meson.build pygobject-3.34.0/tests/meson.build
--- pygobject-3.34.0-orig/tests/meson.build	2019-06-16 15:24:42.000000000 +0000
+++ pygobject-3.34.0/tests/meson.build	2020-11-21 23:32:05.777898680 +0000
@@ -113,8 +113,11 @@
   envdata.append('GI_TYPELIB_PATH', join_paths(meson.build_root(), 'subprojects', 'gobject-introspection', 'gir'))
 endif
 
+assert(host_machine.system().startswith('irix'), 'Expected irix - got ' + host_machine.system())
 if host_machine.system() == 'linux'
     envdata.prepend('LD_LIBRARY_PATH', meson.current_build_dir())
+elif host_machine.system().startswith('irix')
+    envdata.prepend('LD_LIBRARYN32_PATH', meson.current_build_dir())
 endif
 if host_machine.system() == 'windows'
     envdata.prepend('PATH', join_paths(get_option('prefix'), get_option('bindir')))
